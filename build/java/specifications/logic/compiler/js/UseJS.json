{
  "app": "executor",
  "version": "0.0.1",
  "category": "logic.compiler.js",
  "name": "Use JavaScript",
  "description": "Allows to use the given JavaScript module(s) according the specified JSON specification(s): registers it as a new executor.<br>It is a <b>loading-time</b> function. So, you should <b>reload</b> the current chain for changes to these settings to take effect.",
  "tags": [
    "logic"
  ],
  "id": "2c1ef76c-21b7-49c2-be09-e4a0784f1c79",
  "options": {
    "stage": "loading_time"
  },
  "language": "java",
  "java": {
    "class": "net.algart.executors.api.js.UseJS"
  },
  "in_ports": [],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "output"
    }
  ],
  "controls": [
    {
      "caption": "JavaScript executor JSON file(s)/folder(s)",
      "name": "file",
      "description": "Path(s) to one or several JavaScript specification JSON files or folders, containing such JSON files, separated by \";\". In a case of folders, each folder is scanned recursively, and all JavaScript JSONs, found in the folder and its subfolders, become available to use.\nNote: every path is trimmed, i.e. leading/trailing space characters, including line feeds, are removed. Thus, if you need several paths, separated by \";\", you can place each path in a separate line.\nHere and in the following 2 parameters, you can use relative paths (without starting \"/\" or \"c:\\\"), for example, \"test.dat\" or \"samples/test.dat\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": ""
    },
    {
      "caption": "Current working folder",
      "name": "workingDirectory",
      "description": "Folder, which will be current working directory used by JavaScript to resolve relative paths. In particular, it is used to find imported ECMAScript modules.\nYou can use here relative paths (without starting \"/\" or \"c:\\\"), for example, \"js\". They will be resolved relative the current folder, containing the executed chain (\".\" means this folder itself).\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "value",
      "default": "."
    }
  ]
}