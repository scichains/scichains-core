{
  "app": "executor",
  "version": "0.0.1",
  "category": "logic.compiler.mappings",
  "name": "Use mapping",
  "description": "Allows to use the given mapping: registers it as a new executor, creating mapping JSON.<br>It is a <b>loading-time</b> function. So, you should <b>reload</b> the current chain for changes to these settings to take effect.",
  "tags": [
    "logic"
  ],
  "id": "cd464ee3-97c0-4648-89e6-83ce4a954ceb",
  "options": {
    "stage": "loading_time"
  },
  "language": "java",
  "java": {
    "class": "net.algart.executors.api.mappings.UseMapping"
  },
  "in_ports": [],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "output"
    }
  ],
  "controls": [
    {
      "caption": "Mapping JSON file(s)/folder(s)",
      "name": "file",
      "description": "Path(s) to one or several mapping specification JSON files or folders, containing such JSON files, separated by \";\". In a case of folders, each folder is scanned recursively, and all mapping JSONs, found in the folder and its subfolders, become available to use.\nNote: every path is trimmed, i.e. leading/trailing space characters, including line feeds, are removed. Thus, if you need several paths, separated by \";\", you can place each path in a separate line.\nHere and in the following 2 parameters, you can use relative paths (without starting \"/\" or \"c:\\\"), for example, \"test.dat\" or \"samples/test.dat\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": ""
    },
    {
      "caption": "Mapping keys file",
      "name": "mappingKeysFile",
      "description": "Path to a text file containing list of keys, separated by \\n. Every line of this file can contain a comment after // characters; this comment (with trimmed spaces) becomes a caption to the corresponding parameter, and $$$ sequence in the caption (if exists) will be replaced with the key before //. Every key can be either a valid Java identifier, or an integer number, or a range of integers min..max (like \"1..50\").\nThis file is used, when a specification JSON file has not both \"keys_file\" and \"keys\" fields. (If \"keys_file\" field is specified, it is used instead of this parameter. If \"keys\" is specified, it must be JSON array of strings with all keys; then no any file is used.)\nNote: if mapping JSON contains JDON array, named \"ignored_keys\", these ignored keys are automatically excluded from thie list of keys.\nAlso note: you can set here only 1 file. So, it may be useless when you set several mapping specifications in \"Mapping JSON file(s)/folder(s)\" parameter without  \"keys_file\" / \"keys\" fields.",
      "value_type": "String",
      "edition_type": "file",
      "default": ""
    },
    {
      "caption": "Mapping enumeration items file",
      "name": "mappingEnumItemsFile",
      "description": "Path to a text file containing list of possible enumerated values, separated by \\n. Every line of this file can contain a comment after // characters; this comment (with trimmed spaces) becomes a caption to the corresponding item value. This file is used, when a specification JSON file has not both \"enum_items_file\" and \"enum_items\" fields. (If \"enum_items_file\" field is specified, it is used instead of this parameter. If \"enum_items\" is specified, it must be JSON array of strings with all enumerated values; then no any file is used.)\nNote: you can set here only 1 file. So, it may be useless when you set several mapping specifications in \"Mapping JSON file(s)/folder(s)\" parameter without  \"enum_items_file\" / \"enum_items\" fields.",
      "value_type": "String",
      "edition_type": "file",
      "default": ""
    },
    {
      "caption": "Mapping JSON content",
      "name": "mappingJsonContent",
      "description": "This argument is used only when \"Mapping JSON file(s)/folder(s)\" above is an empty string. In this case, this argument must be a text, which is entire mapping specification JSON. This mapping will become available to use. This variant allows to use only 1 mapping in a single call.",
      "value_type": "settings",
      "edition_type": "value",
      "multiline": true,
      "default": ""
    },
    {
      "caption": "Some parameters will be advanced",
      "name": "advancedParameters",
      "description": "If this flag is set and if mapping JSON contains JDON array, named \"important_keys\", then all parameters, corresponding to mapping keys, will become \"advanced\" â€” excepting the keys, listed in \"important_keys\" array. Usually should be set.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    }
  ]
}