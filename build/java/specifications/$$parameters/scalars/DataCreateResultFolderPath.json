{
  "app": "executor",
  "version": "0.0.1",
  "category": "$$[parameters].scalars",
  "name": "Scalar result folder parameter (a string)",
  "options": {
    "behavior": {
      "data": true,
      "data_type": "String",
      "edition_type": "folder"
    }
  },
  "id": "a52b097d-3672-4ee6-a8f2-177297d78cda",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.scalars.creation.CreatePath",
    "new_instance_method": "getSecureInstanceForResult"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "input",
      "caption": "external input",
      "hint": "Chain constant or one of external parameters of the chain: folder for the result data.\nIf specified, it is used instead of \"Path\" parameter."
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path."
    },
    {
      "value_type": "scalar",
      "name": "parent_folder",
      "caption": "parent folder",
      "hint": "Absolute path to the parent folder of the specified path."
    },
    {
      "value_type": "scalar",
      "name": "file_name",
      "caption": "file name",
      "hint": "Actual subfolder name."
    }
  ],
  "controls": [
    {
      "caption": "Path",
      "name": "path",
      "description": "Folder for the result data.\nNote: it MUST be an absolute path; it will NOT be resolved relative any \"current\" folder. Also and must not contain \"suspicious\" characters/substring like % (property?), ${... (variable inside a string?) etc. (excepting starting %TEMP%), because this can probably mean some \"property\" for further replacement by some functions; it should be a normal usual path.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. So, it is correct to write here\n%TEMP%my_folder,\n%TEMP%/my_folder\nor (in Windows)\n%TEMP%\\my_folder\n.Any other system or executor system properties are not allowed here.",
      "value_type": "String",
      "edition_type": "folder",
      "default": ""
    },
    {
      "caption": "What to do?",
      "name": "operation",
      "description": "What to do with the path.\nFor \"check xxx\" operations, this function throws exception if there is no existing file or folder (or if we needs a file, but it is a folder, and vice versa).\nFor \"create xxx\" operations, this function does nothing if the folder or file, requested to create, already exists.\nNote: 3 operations with parent folder (check existence, create parent, create all parents) do nothing if the specified path has no parents, i.e. if it is a root folder.\n\nNOTE: you SHOULD specify system name of this function to use this block as an input parameter, if you are calling this chain as a chain from other solutions.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "do not anything"
        },
        {
          "value": "CHECK_FOLDER_EXISTENCE",
          "caption": "check, if the path specifies existing folder"
        },
        {
          "value": "CHECK_PARENT_EXISTENCE",
          "caption": "check existence of parent folder of the specified path"
        },
        {
          "value": "CREATE_FOLDER",
          "caption": "create specified folder"
        },
        {
          "value": "CREATE_PARENT",
          "caption": "create parent folder of specified folder"
        },
        {
          "value": "CREATE_FOLDER_WITH_PARENTS",
          "caption": "create folder with all parents"
        },
        {
          "value": "CREATE_PARENTS",
          "caption": "create all parents of specified folder"
        }
      ],
      "default": "CREATE_FOLDER"
    }
  ]
}