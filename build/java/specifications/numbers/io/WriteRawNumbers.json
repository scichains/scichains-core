{
  "app": "executor",
  "version": "0.0.1",
  "category": "numbers.io",
  "name": "Write raw numbers",
  "tags": [
    "numbers",
    "i/o"
  ],
  "id": "98dd255c-8ae4-4a47-97fb-3060096cdc1f",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.numbers.io.WriteRawNumbers"
  },
  "in_ports": [
    {
      "value_type": "numbers",
      "name": "input"
    },
    {
      "value_type": "scalar",
      "name": "file",
      "caption": "file",
      "hint": "[Optional] String path to the file. If specified, it is used instead of \"File\" parameter (with all replacements performed in that parameter)."
    },
    {
      "value_type": "scalar",
      "name": "file_name_addition",
      "caption": "file name addition"
    },
    {
      "value_type": "scalar",
      "name": "column_names",
      "hint": "[Optional] List of column names, separated by \\n (name of every column in a separate line).\nThey are used only if \"Write .meta file\" flag is set. In this case, they are stored in \"columnNames\" and \"columnIndexes\" sections of the metadata JSON."
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path to the file"
    },
    {
      "value_type": "scalar",
      "name": "parent_folder",
      "caption": "parent folder",
      "hint": "Absolute path to the parent folder of the file"
    },
    {
      "value_type": "scalar",
      "name": "file_name",
      "caption": "file name",
      "hint": "Actual file name (without folder)"
    }
  ],
  "controls": [
    {
      "caption": "File (raw sequence of bytes)",
      "name": "file",
      "description": "You can use here relative paths (without starting \"/\" or \"c:\\\"), for example, \"test.dat\" or \"samples/test.dat\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "file_to_save",
      "default": ""
    },
    {
      "name": "fileNameAdditionMode",
      "caption": "How to add \"file name addition\" (for example XXX.DAT)",
      "description": "This mode can be used together with input string \"file name addition\"",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "no correction (\"file name addition\" is not used)"
        },
        {
          "value": "AFTER_ALL_PATH",
          "caption": "after all path: /path => /pathXXX.DAT"
        },
        {
          "value": "REPLACE_IN_PATH",
          "caption": "replace $$$ in path: /path/name$$$.ext => /path/nameXXX.DAT.ext"
        },
        {
          "value": "REPLACE_IN_PATH_REMOVING_EXTENSION",
          "caption": "replace $$$ with the addition, but without its extension: /path/name$$$.ext => /path/nameXXX.ext"
        }
      ],
      "default": "NONE"
    },
    {
      "caption": "Secure mode",
      "name": "secure",
      "description": "If set, \"file name addition\" feature, Java system properties and executor system properties in the path are disabled, and the path is checked that it does not contain \"suspicious\" characters/substring like % (property?), ${... (variable inside a string?). Moreover, the path MUST be absolute; it will NOT be resolved relative any \"current\" folder. However, starting %TEMP%/ is allowed.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "name": "inputRequired",
      "caption": "Requires input",
      "description": "If set, the input port must contain some initialized matrix; in another case, this function will throw an exception or will delete the file (see below). If this flag is cleared, empty input port doesn't lead to any effect.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Clear file on reset",
      "description": "If set, the file is cleared (deleted) while reset, i.e. before 1st iteration of the loop. It can be useful while using loops in \"Append to the end of file\" mode: file will be created while 1st iteration and appended after all other iterations.\nNote: if there is no loop, the file is deleted always; in other words, this flag just cancel effect of \"Append to the end of file\" flag.",
      "name": "clearFileOnReset",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "name": "appendToExistingFile",
      "caption": "Append to the end of file",
      "description": "Append numbers to the end of the existing file (if it exists)",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Delete file for non-initialized",
      "description": "Delete file if the input port is not initialized (in particular, as a result of an exception in previous blocks). This flag is ignored if \"Requires input\" is not set.",
      "name": "deleteFileIfNonInitialized",
      "value_type": "boolean",
      "edition_type": "value",
      "advanced": true,
      "default": false
    },
    {
      "caption": "Where to copy previous file",
      "description": "Copy of previously existing file, deleted if the input port is not initialized",
      "name": "copyOfPreviousFileIfNonInitialized",
      "value_type": "String",
      "edition_type": "file",
      "advanced": true,
      "default": ""
    },
    {
      "caption": "Byte order",
      "name": "byteOrder",
      "description": "Note: we recommend to use \"big-endian\" to avoid compatibility problem while transferring the file to other platforms. But if you are sure that this file will be used at the same computer, the \"native\" order can little improve performance.\nThis order is not important for \"byte\" element type.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "BIG_ENDIAN",
          "caption": "big-endian"
        },
        {
          "value": "LITTLE_ENDIAN",
          "caption": "little-endian"
        },
        {
          "value": "NATIVE",
          "caption": "native (optimal for current computer)"
        }
      ],
      "default": "NATIVE"
    },
    {
      "caption": "Write .meta file",
      "description": "If set, this function writes also JSON metadata file with information about block length (i.e. number of columns), element type, byte order and column names (when they are specified).\nThe name of metadata file is the name of main file + \".meta\" suffix. For example, if the main file is \"test.dat\", then the metadata file will be \"test.dat.meta\".",
      "name": "writeMetadataFile",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Columns indexing base in .meta",
      "name": "columnsIndexingBaseInMetadata",
      "description": "If the previous flag is set, this parameter specifies the indexing base in \"columnIndexes\" sections of the metadata JSON: will be the stored index of the first column 0 or 1.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "ZERO_BASED",
          "caption": "0 (zero-based numbering)"
        },
        {
          "value": "ONE_BASED",
          "caption": "1 (one-based numbering)"
        }
      ],
      "default": "ZERO_BASED"
    },
    {
      "caption": "Column names",
      "description": "If contains non-empty string with any non-space characters, and if the input \"column_names\" is not specified, this argument is used instead of the input \"column_names\".",
      "name": "columnNames",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": ""
    }
  ]
}